apply plugin: 'info.solidsoft.pitest.aggregator'

allprojects {
    repositories {
        mavenCentral()
        maven { url = "https://repo.spring.io/snapshot" }
        maven { url = "https://repo.spring.io/milestone" }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'info.solidsoft.pitest'

    compileJava.dependsOn validateStructure

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        implementation 'io.projectreactor:reactor-core'
        implementation 'io.projectreactor.addons:reactor-extra'

        testImplementation 'io.projectreactor.tools:blockhound-junit-platform:1.0.13.RELEASE'
        testImplementation 'io.projectreactor:reactor-test'
        testRuntimeOnly   'org.junit.platform:junit-platform-launcher'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        compileOnly        "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly     "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    }

    tasks.withType(Test).configureEach {
        if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
            jvmArgs += ["-XX:+AllowRedefinitionToAddDeleteMethods"]
        }
    }

    // Para que cada submódulo deje su propio jacocoTestReport
    test.finalizedBy(project.tasks.jacocoTestReport)

    pitest {
        targetClasses            = ['co.com.auth.*']
        excludedClasses          = []
        excludedTestClasses      = []
        pitestVersion            = '1.20.1'
        verbose                  = false
        outputFormats            = ['XML', 'HTML']
        threads                  = 8
        exportLineCoverage       = true
        useClasspathFile         = true
        timestampedReports       = false
        junit5PluginVersion      = '1.2.2'
        failWhenNoMutations      = false
        jvmArgs                  = ["-XX:+AllowRedefinitionToAddDeleteMethods"]
        fileExtensionsToFilter.addAll('xml', 'orbit')
    }

    jacocoTestReport {
        dependsOn test, 'pitest'
        reports {
            xml.required.set(true)
            xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco.xml"))
            csv.required.set(false)
            html.outputLocation.set(layout.buildDirectory.dir("reports/jacocoHtml"))
        }
    }
}

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDirectory.set(layout.buildDirectory.dir("reports"))
}

/* ============================
   REPORTE UNIFICADO (ROOT)
   ============================ */
tasks.register('jacocoMergedReport', org.gradle.testing.jacoco.tasks.JacocoReport) {
    // 1) Asegurar ejecución de tests y reportes de TODOS los submódulos
    dependsOn(subprojects.collect { it.tasks.matching { it.name == 'test' } })
    dependsOn(subprojects.collect { it.tasks.matching { it.name == 'jacocoTestReport' } })
    // si existiera :test en el root (poco común), también depender:
    if (tasks.findByName('test') != null) {
        dependsOn(tasks.named('test'))
    }
    // Opcional: si agregas 'pitestReportAggregate' en el pipeline
    dependsOn("pitestReportAggregate")

    // 2) Fuentes y clases de todos los submódulos
    def srcDirs = subprojects.collect { it.file('src/main/java') }
    additionalSourceDirs.setFrom(files(srcDirs))
    sourceDirectories.setFrom(files(srcDirs))

    // Clases compiladas (Java/Kotlin si aplica)
    def classDirsList = subprojects.collect {
        [
                it.layout.buildDirectory.dir("classes/java/main").get().asFile,
                it.layout.buildDirectory.dir("classes/kotlin/main").get().asFile
        ]
    }.flatten().findAll { it.exists() }

    // 3) APLICAR EXCLUSIONES AQUÍ (una sola vez, sin doFirst)
    classDirectories.setFrom(
            files(classDirsList).asFileTree.matching {
                exclude rootProject.ext.jacocoExcludes
            }
    )

    // 4) Archivos de cobertura (.exec) de cada submódulo
    executionData.setFrom(
            subprojects.collect { it.file("${it.buildDir}/jacoco/test.exec") }.findAll { it.exists() }
    )

    // 5) Reportes (coincide con ruta para Sonar)
    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(false)

        html.outputLocation.set(layout.buildDirectory.dir("reports/jacocoMergedReport/html"))
        xml.outputLocation.set(layout.buildDirectory.file("reports/jacocoMergedReport/jacocoMergedReport.xml"))
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs = ['-Amapstruct.suppressGeneratorTimestamp=true']
}

pitestReportAggregate {
    doLast {
        def reportDir = layout.buildDirectory.dir("reports/pitest").get().asFile
        def consolidatedReport = new File(reportDir, 'mutations.xml')
        consolidatedReport.withWriter { writer ->
            writer.write("<mutations>\n")
            subprojects.each { subproject ->
                def xmlReport = subproject.layout.buildDirectory.file("reports/pitest/mutations.xml").get().asFile
                if (xmlReport.exists()) {
                    def xmlContent = xmlReport.text
                    xmlContent = xmlContent.replaceAll("<\\?xml[^>]*>", "")
                    xmlContent = xmlContent.replaceAll("</?mutations( partial=\"true\")?>", "")
                    writer.write(xmlContent.trim() + "\n")
                }
            }
            writer.write("</mutations>")
        }
    }
}

tasks.named('wrapper') {
    gradleVersion = '8.14.3'
}
